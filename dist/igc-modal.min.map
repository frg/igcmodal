{"version":3,"sources":["igc-modal.js"],"names":["global","buildModal","contentHolder","cellHolder","boxHolder","innerHolder","docFrag","document","createDocumentFragment","this","modal","createElement","className","options","contentClassName","cellClassName","boxClassName","innerClassName","style","minWidth","maxWidth","closeButton","closeBtnClassName","innerHTML","appendChild","tagName","content","buildModalContent","body","afterDomInit","call","initEvents","addEventListener","hide","bind","hideOverlayOnClick","e","target","elementIsDescendant","compareModalZIndex","modalA","modalB","getModalZIndex","element","parseInt","defaultView","getComputedStyle","getPropertyValue","elementHasClass","replace","indexOf","elementRemoveClass","RegExp","parent","child","node","parentNode","extendDefaults","defaults","deafultProperty","hasOwnProperty","undefined","openClassName","modalArr","IgcModal","init","defaultOptions","beforeShow","afterShow","beforeHide","afterHide","onOverlayClick","prototype","show","forceShow","forceHide","highestZIndex","sort","zIndex","destroy","removeChild","index","splice","setContent","newContent","isHidden","isShowing","isVisible","orderModalArr","i","len","length","push","hideAll","shouldForceHide","setDefaultOptions","Error","window"],"mappings":"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","file":"dist/igc-modal.min.js","sourcesContent":["(function(global) {\r\n    'use strict';\r\n    \r\n    /* IGC MODAL PLUGIN\r\n     *\r\n     * Events:\r\n     * - beforeShow\r\n     * - afterShow\r\n     * - beforeHide\r\n     * - afterHide\r\n     * - afterDomInit\r\n     *\r\n     * Instance Functions: \r\n     * - show\r\n     * - hide\r\n     * - forceShow (no events)\r\n     * - forceHide (no events)\r\n     * - destroy (remove element and events from dom) \r\n     * - setContent (change content - dom element, html, string)\r\n     * - isShowing \r\n     * - isHidden\r\n     * - isVisible (checks if modal is showing and is on top)\r\n     * \r\n     * Global Functions:\r\n     * - hideAll\r\n     */\r\n\r\n    var className, openClassName, closeBtnClassName, contentClassName, cellClassName, boxClassName, innerClassName, modalArr;\r\n\r\n    className = 'igc-modal';\r\n    openClassName = className + '-visible';\r\n    closeBtnClassName = className + '-closebtn';\r\n    contentClassName = className + '-content';\r\n    cellClassName = className + '-cell';\r\n    boxClassName = className + '-box';\r\n    innerClassName = className + '-inner';\r\n    modalArr = [];\r\n\r\n    /**\r\n     * (Shortcut for removing the \"new\" keyword when creating an instance of the modal)\r\n     * \r\n     * @param options (plugin options)\r\n     * @returns (a new modal instance)\r\n     */\r\n    var IgcModal = function(options) {\r\n        return new IgcModal.init(options);\r\n    };\r\n\r\n    var defaultOptions = {\r\n        className: null,\r\n        // content: $('#header').get(0),\r\n        // content: \"This is a modal\",\r\n        // content = '<iframe src=\"' + contentA + '\" frameborder=\"0\" allowfullscreen align=\"center\" style=\"overflow:hidden;height:100%;width:100%\" height=\"100%\" width=\"100%\"><p>Your browser does not support iframes.</p></iframe>',\r\n        content: '',\r\n        maxWidth: null, // 600 = 600px\r\n        minWidth: null,\r\n        closeButton: true, // accepts same args as content property\r\n        hideOverlayOnClick: true,\r\n        /**\r\n         * (callback fired before the modal is shown)\r\n         */\r\n        beforeShow: function() { },\r\n        /**\r\n         * (callback fired after the modal is shown)\r\n         */\r\n        afterShow: function() { },\r\n        /**\r\n         * (callback fired before the modal is hid)\r\n         */\r\n        beforeHide: function() { },\r\n        /**\r\n         * (callback fired after the modal is hid)\r\n         */\r\n        afterHide: function() { },\r\n        /**\r\n         * (callback fired after the modal dom is initiated)\r\n         */\r\n        afterDomInit: function() { },\r\n        /**\r\n         * (callback fired when a \"click\" event is triggered on the modal overlay)\r\n         */\r\n        onOverlayClick: function() { }\r\n    };\r\n\r\n    IgcModal.prototype = {\r\n        /**\r\n         * (function that shows the modal while also calling the respective callbacks passed in the options)\r\n         * \r\n         * @returns (the current instance of the modal)\r\n         */\r\n        show: function() {\r\n            if (this.options.beforeShow.call(this) !== false) {\r\n                IgcModal.prototype.forceShow.call(this);\r\n                this.options.afterShow.call(this);\r\n            }\r\n\r\n            return this;\r\n        },\r\n        /**\r\n         * (function that hides the modal while also calling the respective callbacks passed in the options)\r\n         * \r\n         * @returns (the current instance of the modal)\r\n         */\r\n        hide: function() {\r\n            if (this.options.beforeHide.call(this) !== false) {\r\n                IgcModal.prototype.forceHide.call(this);\r\n                this.options.afterHide.call(this);\r\n            }\r\n\r\n            return this;\r\n        },\r\n        /**\r\n         * (function that shows the modal while taking into account that other modals might already be visible)\r\n         * \r\n         * @returns (the current instance of the modal)\r\n         */\r\n        forceShow: function() {\r\n            // get highest z-index occupied my a modal\r\n            var highestZIndex = getModalZIndex(modalArr.sort(compareModalZIndex)[0].modal);\r\n            \r\n            // increment modal z-index\r\n            this.modal.style.zIndex = highestZIndex + 1;\r\n            \r\n            if (!elementHasClass(this.modal, openClassName)) {\r\n                this.modal.className = this.modal.className + ' ' + openClassName;\r\n            }\r\n\r\n            return this;\r\n        },\r\n        /**\r\n         * (function that hides the modal)\r\n         * \r\n         * @returns (the current instance of the modal)\r\n         */\r\n        forceHide: function() {\r\n            if (elementHasClass(this.modal, openClassName)) {\r\n                this.modal.className = elementRemoveClass(this.modal, openClassName);\r\n            }\r\n\r\n            return this;\r\n        },\r\n        /**\r\n         * (function that destroys the modal dom and its referenced instance)\r\n         * \r\n         * @returns (null)\r\n         */\r\n        destroy: function() {\r\n            // remove modal DOM\r\n            document.body.removeChild(this.modal);\r\n            \r\n            // remove modal reference\r\n            var index = modalArr.indexOf(this);\r\n            if (index > -1) {\r\n                modalArr.splice(index, 1);\r\n            }\r\n            \r\n            return null;\r\n        },\r\n        /**\r\n         * (function that sets the content of the modal)\r\n         * \r\n         * @param content (same values as defined for the \"content\" property within the options)\r\n         * @returns (the current instance of the modal)\r\n         */\r\n        setContent: function(content) {\r\n            var contentHolder = this.content.parentNode;\r\n            var newContent = buildModalContent(content);\r\n\r\n            contentHolder.removeChild(this.content);\r\n            contentHolder.appendChild(newContent);\r\n\r\n            this.content = newContent;\r\n\r\n            return this;\r\n        },\r\n        /**\r\n         * (function that checks if the modal is hidden (doesnt have has constant class))\r\n         * \r\n         * @returns (boolean)\r\n         */\r\n        isHidden: function() {\r\n            return !elementHasClass(this.modal, openClassName);\r\n        },\r\n        /**\r\n         * (function that checks if the modal is showing (has has constant class))\r\n         * \r\n         * @returns (boolean)\r\n         */\r\n        isShowing: function() {\r\n            return elementHasClass(this.modal, openClassName);\r\n        },\r\n        /**\r\n         * (function that checks if the modal is visible (considers z-index order))\r\n         * \r\n         * @returns (boolean)\r\n         */\r\n        isVisible: function() {\r\n            var isShowing = IgcModal.prototype.isShowing.call(this);\r\n            \r\n            if (isShowing) {\r\n                // check if modal instance has the highest z-index\r\n                \r\n                // order modals by highest z-index\r\n                var orderModalArr = modalArr.sort(compareModalZIndex);\r\n                for (var i = 0, len = orderModalArr.length; i < len; i++) {\r\n                    if (orderModalArr[i].isShowing()) {\r\n                        // if current modal is showing\r\n                        if (getModalZIndex(orderModalArr[i].modal) > getModalZIndex(this.modal)) {\r\n                            // if current modal has a higher z-index\r\n                            // it must mean that \"this\" modal is not visible\r\n                            return false;\r\n                        }\r\n                    }\r\n                }\r\n                \r\n                // if no currently showing modals have a higher z-index\r\n                // it must mean that \"this\" modal is visible\r\n                return true;\r\n            }\r\n            \r\n            // if \"this\" modal is not showing it cannot be visible            \r\n            return false;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * (initialization of a modal instance)\r\n     * \r\n     * @param options (modal instance options)\r\n     * @returns (modal instance)\r\n     */\r\n    IgcModal.init = function(options) {\r\n        this.closeButton = null;\r\n        this.modal = null;\r\n        this.options = null;\r\n\r\n        // Create options by extending defaults with the passed in arugments\r\n        if (options && typeof options === 'object') {\r\n            this.options = extendDefaults(defaultOptions, options);\r\n        } else {\r\n            this.options = defaultOptions;\r\n        }\r\n\r\n        buildModal.call(this);\r\n        initEvents.call(this);\r\n        \r\n        modalArr.push(this);\r\n\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * (function that hides all modal instances)\r\n     * \r\n     * @param shouldForceHide (boolean that sets if the modals should be hidden forcely without firing events)\r\n     */\r\n    IgcModal.hideAll = function(shouldForceHide) {\r\n        for (var i = 0, len = modalArr.length; i < len; i++) {\r\n            if (shouldForceHide) {\r\n                modalArr[i].forceHide();\r\n            } else {\r\n                modalArr[i].hide();\r\n            }\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * (function that sets new default options)\r\n     * \r\n     * @param options (options object that will override the default options)\r\n     */\r\n    IgcModal.setDefaultOptions = function(options) {\r\n        if (options && typeof options === 'object') {\r\n            defaultOptions = extendDefaults(defaultOptions, options);\r\n        } else {\r\n            throw new Error('Invalid options parameter, typeof object required!');\r\n        }\r\n    };\r\n\r\n    /**\r\n     * (builds modal instance DOM structure)\r\n     */\r\n    function buildModal() {\r\n        var contentHolder, cellHolder, boxHolder, innerHolder, docFrag;\r\n\r\n        docFrag = document.createDocumentFragment();\r\n\r\n        // modal container\r\n        this.modal = document.createElement('div');\r\n        this.modal.className = className + ((typeof this.options.className === 'string') ? ' ' + this.options.className : '');\r\n\r\n        contentHolder = document.createElement('div');\r\n        cellHolder = document.createElement('div');\r\n        boxHolder = document.createElement('div');\r\n        innerHolder = document.createElement('div');\r\n\r\n        contentHolder.className = contentClassName;\r\n        cellHolder.className = cellClassName;\r\n        boxHolder.className = boxClassName;\r\n        innerHolder.className = innerClassName;\r\n\r\n        contentHolder.style.minWidth = this.options.minWidth + 'px';\r\n        contentHolder.style.maxWidth = this.options.maxWidth + 'px';\r\n\r\n        if (this.options.closeButton === true) {\r\n            this.closeButton = document.createElement('a');\r\n            this.closeButton.className = closeBtnClassName;\r\n            this.closeButton.innerHTML = '×';\r\n            boxHolder.appendChild(this.closeButton);\r\n        } else if (this.options.closeButton.tagName) {\r\n            this.closeButton = this.options.closeButton;\r\n            boxHolder.appendChild(this.closeButton);\r\n        }\r\n\r\n        this.content = buildModalContent(this.options.content);\r\n\r\n        contentHolder.appendChild(cellHolder);\r\n        cellHolder.appendChild(boxHolder);\r\n        boxHolder.appendChild(innerHolder);\r\n        innerHolder.appendChild(this.content);\r\n\r\n        this.modal.appendChild(contentHolder);\r\n\r\n        docFrag.appendChild(this.modal);\r\n\r\n        document.body.appendChild(docFrag);\r\n\r\n        this.options.afterDomInit.call(this);\r\n    }\r\n\r\n    /**\r\n     * (builds modal content DOM structure)\r\n     * \r\n     * @param content (same values as defined for the \"content\" property within the options)\r\n     * @returns (element with modal content DOM structure)\r\n     */\r\n    function buildModalContent(content) {\r\n        var contentHolder = document.createElement('div');\r\n\r\n        if (content.innerHTML) {\r\n            content = content.innerHTML;\r\n        }\r\n        contentHolder.innerHTML = content;\r\n\r\n        return contentHolder;\r\n    }\r\n\r\n    /**\r\n     * (initialization of element events)\r\n     */\r\n    function initEvents() {\r\n        // close button click -- hide modal\r\n        if (this.closeButton) {\r\n            this.closeButton.addEventListener('click', this.hide.bind(this));\r\n        }\r\n\r\n        if (this.options.hideOverlayOnClick === true) {\r\n            this.modal.addEventListener('click', function(e) {\r\n                if (this.content !== e.target && !elementIsDescendant(this.content, e.target) && (this.closeButton && this.closeButton !== e.target)) {\r\n                    this.hide();\r\n                }\r\n            }.bind(this));\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * (compares modal z-indices)\r\n     * \r\n     * @param modalA (modal instance)\r\n     * @param modalB (modal instance)\r\n     * @returns (-Number, 0, +Number)\r\n     */\r\n    function compareModalZIndex(modalA, modalB) {\r\n        return getModalZIndex(modalB.modal) - getModalZIndex(modalA.modal);\r\n    }\r\n    \r\n    /**\r\n     * (returns modal z-index)\r\n     * \r\n     * @param element (modal container element)\r\n     * @returns (Number)\r\n     */\r\n    function getModalZIndex(element) {\r\n        // auto, inherit, initial, unset values are regarded as 0\r\n        return parseInt(document.defaultView.getComputedStyle(element, null).getPropertyValue('z-index')) || 0;\r\n    }\r\n\r\n    /**\r\n     * (checks if element has class)\r\n     * \r\n     * @param element (element)\r\n     * @param className (class name)\r\n     * @returns (boolean)\r\n     */\r\n    function elementHasClass(element, className) {\r\n        return ((' ' + element.className + ' ').replace(/[\\n\\t]/g, ' ').indexOf(' ' + className + ' ') > -1);\r\n    }\r\n\r\n    /**\r\n     * (removes class from \"class\" attribute string)\r\n     * \r\n     * @param element (element)\r\n     * @param className (class name to be removed)\r\n     * @returns (new \"class\" attribute string)\r\n     */\r\n    function elementRemoveClass(element, className) {\r\n        return element.className.replace(new RegExp('(\\\\s|^)' + className + '(\\\\s|$)'), '');\r\n    }\r\n\r\n    /**\r\n     * (check if element is decendent of element)\r\n     * \r\n     * @param parent (expected parent element)\r\n     * @param child (expected child element)\r\n     * @returns (boolean)\r\n     */\r\n    function elementIsDescendant(parent, child) {\r\n        var node = child.parentNode;\r\n        while (node != null) {\r\n            if (node == parent) {\r\n                return true;\r\n            }\r\n            node = node.parentNode;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * (extends properties of one object from another)\r\n     * \r\n     * @param defaults (default object)\r\n     * @param options (object to be extended with)\r\n     * @returns (extended object)\r\n     */\r\n    function extendDefaults(defaults, options) {\r\n        var deafultProperty;\r\n        for (deafultProperty in defaults) {\r\n            if (defaults.hasOwnProperty(deafultProperty)) {\r\n                if (options[deafultProperty] === undefined) {\r\n                    // if defaults property is undefined in options\r\n                    // add the default property to options\r\n                    options[deafultProperty] = defaults[deafultProperty];\r\n                }\r\n            }\r\n        }\r\n        return options;\r\n    }\r\n\r\n    IgcModal.init.prototype = IgcModal.prototype;\r\n    global.IgcModal = IgcModal;\r\n} (window));"]}